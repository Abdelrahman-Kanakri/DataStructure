
#include <iostream>
#include <cassert>
using namespace std;

struct nodeType
{
    int info;
    nodeType* link;
};

//****************************
class linkedListType
{
public:
    const linkedListType& operator=(const linkedListType&);
    void initializeList();
    bool isEmptyList() const;
    void print() const;
    int length() const;
    void destroyList();
    int front() const;
    int back() const;
    virtual bool search(const int& searchItem) const = 0;
    virtual void insertFirst(const int& newItem) = 0;
    virtual void insertLast(const int& newItem) = 0;
    virtual void deleteNode(const int& deleteItem) = 0;
    linkedListType();
    linkedListType(const linkedListType& otherList);
    ~linkedListType();
protected:
    int count;
    nodeType* first;
    nodeType* last;
private:
    void copyList(const linkedListType& otherList);
};


bool linkedListType::isEmptyList() const
{
    return (first == NULL);
}


linkedListType::linkedListType() //default constructor
{
    first = NULL;
    last = NULL;
    count = 0;
}


void linkedListType::destroyList()
{
    nodeType* temp;   //pointer to deallocate the memory
    //occupied by the node
    while (first != NULL)   //while there are nodes in the list
    {
        temp = first;        //set temp to the current node
        first = first->link; //advance first to the next node
        delete temp;   //deallocate the memory occupied by temp
    }

    last = NULL; //initialize last to NULL; first has already
    //been set to NULL by the while loop
    count = 0;
}


void linkedListType::initializeList()
{
    destroyList(); //if the list has any nodes, delete them
}


void linkedListType::print() const
{
    nodeType* current; //pointer to traverse the list

    current = first;    //set current so that it points to 
    //the first node
    while (current != NULL) //while more data to print
    {
        cout << current->info << " ";
        current = current->link;
    }
}//end print


int linkedListType::length() const
{
    return count;
}  //end length


int linkedListType::front() const
{
    assert(first != NULL);

    return first->info; //return the info of the first node	
}//end front


int linkedListType::back() const
{
    assert(last != NULL);

    return last->info; //return the info of the last node	
}//end back



void linkedListType::copyList(const linkedListType& otherList)
{
    if (first != NULL) //if the list is nonempty, make it empty
        destroyList();

    if (otherList.first == NULL) //otherList is empty
    {
        first = NULL;
        last = NULL;
        count = 0;
    }
    else
    {
        count = otherList.count;

        nodeType* newNode; //pointer to create a node
        nodeType* current; //pointer to traverse the list
        current = otherList.first; //current points to the 
        //list to be copied
//copy the first node
        first = new nodeType;  //create the node

        first->info = current->info; //copy the info
        first->link = NULL;        //set the link field of 
        //the node to NULL
        last = first;              //make last point to the
        //first node
        current = current->link;     //make current point to
        //the next node

//copy the remaining list
        while (current != NULL)
        {
            newNode = new nodeType;  //create a node
            newNode->info = current->info; //copy the info
            newNode->link = NULL;       //set the link of 
            //newNode to NULL
            last->link = newNode;  //attach newNode after last
            last = newNode;        //make last point to
            //the actual last node
            current = current->link;   //make current point 
            //to the next node
        }//end while
    }//end else
}//end copyList


linkedListType::~linkedListType() //destructor
{
    destroyList();
}//end destructor


linkedListType::linkedListType(const linkedListType& otherList)
{
    first = NULL;
    copyList(otherList);
}//end copy constructor


const linkedListType& linkedListType::operator=(const linkedListType& otherList)
{
    if (this != &otherList) //avoid self-copy
    {
        copyList(otherList);
    }//end else

    return *this;
}
//**************************************************************************************
class orderedLinkedList : public linkedListType
{
public:
    bool search(const int& searchItem) const;
    void insert(const int& newItem);
    void insertFirst(const int& newItem);
    void insertLast(const int& newItem);
    void deleteNode(const int& deleteItem);
};

bool orderedLinkedList::search(const int& searchItem) const
{
    bool found = false;
    nodeType* current; //pointer to traverse the list

    current = first;  //start the search at the first node

    while (current != NULL && !found)
        if (current->info >= searchItem)
            found = true;
        else
            current = current->link;

    if (found)
        found = (current->info == searchItem); //test for equality

    return found;
}//end search

void orderedLinkedList::insert(const int& newItem)
{
    nodeType* current; //pointer to traverse the list
    nodeType* trailCurrent = 0; //pointer just before current
    nodeType* newNode;  //pointer to create a node
   
    bool  found;

    newNode = new nodeType; //create the node
    newNode->info = newItem;   //store newItem in the node
    newNode->link = NULL;      //set the link field of the node
    //to NULL

    if (first == NULL)  //Case 1
    {
        first = newNode;
        last = newNode;
        count++;
    }
    else
    {
        current = first;
        found = false;
        while (current != NULL && !found) //search the list
            if (current->info >= newItem)
                found = true;
            else
            {
                trailCurrent = current;
                current = current->link;
            }
        if (current == first)      //Case 2
        {
            newNode->link = first;
            first = newNode;
            count++;
        }
        else                       //Case 3
        {
            trailCurrent->link = newNode;
            newNode->link = current;

            if (current == NULL)
                last = newNode;

            count++;
        }
    }//end else
}//end insert


void orderedLinkedList::insertFirst(const int& newItem)
{
    insert(newItem);
}//end insertFirst


void orderedLinkedList::insertLast(const int& newItem)
{
    insert(newItem);
}//end insertLast

void orderedLinkedList::deleteNode(const int& deleteItem)
{
    nodeType* current; //pointer to traverse the list
    nodeType* trailCurrent = 0; //pointer just before current
    bool found;

    if (first == NULL) //Case 1
        cout << "Cannot delete from an empty list." << endl;
    else
    {
        current = first;
        found = false;

        while (current != NULL && !found)  //search the list
            if (current->info >= deleteItem)
                found = true;
            else
            {
                trailCurrent = current;
                current = current->link;
            }

        if (current == NULL)   //Case 4 item not found
            cout << "The item to be deleted is not in the "
            << "list." << endl;
        else
            if (current->info == deleteItem) //the item to be 
                //deleted is in the list
            {
                if (first == current)       //Case 2 delet first
                {
                    first = first->link;

                    if (first == NULL)
                        last = NULL;

                    delete current;
                }
                else                         //Case 3 delete last
                {
                    trailCurrent->link = current->link;

                    if (current == last)
                        last = trailCurrent;

                    delete current;
                }
                count--;
            }
            else                            //Case 4
                cout << "The item to be deleted is not in the "
                << "list." << endl;
    }
}//end deleteNode


int main()
{
    orderedLinkedList l;
    l.insert(5);
    l.insert(6);
    l.insert(7);
    l.deleteNode(7);
    l.print();


    return 0;
}
