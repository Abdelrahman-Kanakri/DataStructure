#include<iostream>
using namespace std;
template<class t>
class Stack {
private:
	int counter;
	struct StackNode
	{
		t item;
		StackNode* next;
		
	};
	StackNode* stackTopPTr, * curPtr;
public:
	Stack()
 {
		stackTopPTr = NULL;
		counter = 0;
	}
	bool isEmpty()
	{
		return stackTopPTr == NULL;
	}
	void push(t newItem)
	{
		StackNode* newPtr = new StackNode;
		if (newPtr == NULL)
			cout << "Stack push cannot allocate memory";
		else
		{
			newPtr->item = newItem;
			newPtr->next = stackTopPTr;
			stackTopPTr = newPtr;
			counter++;
		}
	}
	void pop() {
		if (isEmpty())
			cout << "Stack empty on pop";
		else {
			StackNode* temp = stackTopPTr;
			stackTopPTr = stackTopPTr->next;
			temp->next = NULL;
			delete temp;
			counter--;
		}
	}
	void pop(t stackTop)
	{
		if (isEmpty())
			cout << "Stack empty on pop";
		else {
			stackTop = stackTopPTr->item;
			StackNode* temp = stackTopPTr;
			stackTopPTr = stackTopPTr->next;
			temp->next = NULL;
			delete temp;
			counter--;
		}
	}
	void getTop(t stackTop)
	{
		if (isEmpty())
			cout << "stack empty on getTop";
		else
			stackTop = stackTopPTr->item;
		cout << "\nTop Element of the stack is " << stackTop;
		cout << endl;
	}
	void display()
	{
		curPtr = stackTopPTr;
		cout << "Items in the stack : ";
		cout << "[ ";
		while (curPtr != NULL)
		{
			cout << curPtr->item<<" ";
			curPtr = curPtr->next;
		}
		cout << " ]\n";
	}
	int length()
	{
		return counter;
	}
};
int main()
{
	Stack<int>s;
	s.push(10);
	s.push(20);
	s.display();
	cout<<s.length();
}
